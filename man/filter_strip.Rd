% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/format.R
\name{filter_strip}
\alias{filter_strip}
\title{Filter Columns with Merged Concept Strips}
\usage{
filter_strip(data, strip_col, ...)
}
\arguments{
\item{data}{dataframe with the merged concept column}

\item{...}{arguments that will be passed to the dplyr filter function using the base Concept Table field names}

\item{merge_col}{column of merged concepts}
}
\value{
A tibble with the same number of columns as the input with the number of rows equal or less than that of the input.
}
\description{
This function filters a column that contains Concept Strips using Concept Table parameters. The target column may contain 1 or more merged concept strip, and the multiple strips must be separated by a new line \"\\n\" for the filter to operate correctly. It is important to note that the the filter is applied to the entire Concept Strip cell and will not alter the data content within the cell otherwise. For example, if the filter `vocabulary_id == 'RxNorm'` is used for `ColumnA`, a `ColumnA` cell that contains at least 1 RxNorm concept will be filtered for though there are other non-RxNorm concepts in that same cell.
}
\examples{
library(tidyverse)
library(chariot)

test_data <-
        queryAthena("SELECT * FROM omop_vocabulary.concept ORDER BY RANDOM() LIMIT 20;",
                    cache_only = TRUE)

merge_strip(data = test_data,
            into = "concept")

merge_strip(data = test_data,
            into = "concept",
            vocabulary_id,
            concept_class_id)

test_output <- merge_strip(data = test_data,
                        into = "concept") \%>\%
                dplyr::select(-concept_id)

# Filter at a Strip Column
filter_strip(test_output,
             strip_col = concept,
             vocabulary_id \%in\% c("RxNorm"))

# Filter at more than 1 Strip Column
test_data <-
        queryAthena("SELECT * FROM omop_vocabulary.concept ORDER BY RANDOM() LIMIT 10;",
                    cache_only = TRUE) \%>\%
        merge_strip(into = "concept")

test_data <-
        dplyr::bind_cols(test_data \%>\%
                                 rubix::randomize() \%>\%
                                 dplyr::select(concept_a = concept),
                         test_data \%>\%
                                 rubix::randomize() \%>\%
                                 dplyr::select(concept_b = concept))

filter_at_all_strip(data = test_data,
                strip_cols = c("concept_a",
                               "concept_b"),
                all = TRUE,
                vocabulary_id \%in\% c("RxNorm"))

filter_at_any_strip(data = test_data,
                    strip_cols = c("concept_a",
                                   "concept_b"),
                    all = TRUE,
                    vocabulary_id \%in\% c("RxNorm"))
}
\seealso{
\code{\link[dplyr]{tidyeval-compat}},\code{\link[dplyr]{mutate}},\code{\link[dplyr]{filter_all}},\code{\link[dplyr]{filter}},\code{\link[dplyr]{select}},\code{\link[dplyr]{distinct}}
 \code{\link[rlang]{as_name}}
 \code{\link[tidyr]{separate_rows}}
 \code{\link[rubix]{normalize_all_to_na}}
}
